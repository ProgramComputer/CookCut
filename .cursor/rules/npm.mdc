---
description: NPM guide
globs: *.json
---
# NPM Package Installation Rules

## Package Installation Guidelines

1. **Version Control**
   - Always specify exact versions or compatible ranges
   - Use `~` for patch releases
   - Use `^` for minor releases
   - Lock major versions for critical dependencies

2. **Dependencies Structure**
   ```json
   {
     "dependencies": {
       // Production dependencies
       "expo": "~52.0.0",
       "react": "18.2.0",
       "react-native": "0.73.2"
     },
     "devDependencies": {
       // Development tools and types
       "@types/react": "~18.2.45",
       "typescript": "^5.1.3"
     }
   }
   ```

3. **Installation Commands**
   - New production dependency: `npm install package-name`
   - New dev dependency: `npm install --save-dev package-name`
   - Specific version: `npm install package-name@version`
   - Update all packages: `npm update`

4. **Version Management**
   - Check outdated packages: `npm outdated`
   - View dependency tree: `npm list`
   - Fix vulnerabilities: `npm audit fix`

5. **Clean Installation**
   ```powershell
   # Windows (PowerShell)
   Remove-Item -Recurse -Force node_modules
   Remove-Item package-lock.json
   npm install

   # Unix/Linux/Mac
   rm -rf node_modules
   rm package-lock.json
   npm install
   ```

6. **Package Groups**
   - UI Components: `@ui-kitten/*`, `react-native-*`
   - State Management: `@reduxjs/toolkit`, `react-redux`
   - Navigation: `expo-router`, `react-native-screens`
   - Storage: `@supabase/supabase-js`, `firebase`

7. **Version Compatibility**
   ```json
   {
     // Core dependencies
     "expo": "~52.0.0",
     "react": "18.2.0",
     "react-native": "0.73.2",
     
     // UI Kit
     "@ui-kitten/components": "^5.3.1",
     "@ui-kitten/eva-icons": "^5.3.1",
     "@eva-design/eva": "^2.2.0",
     
     // Navigation
     "expo-router": "^3.4.0",
     "react-native-screens": "~3.29.0",
     
     // State Management
     "@reduxjs/toolkit": "^2.1.0",
     "react-redux": "^9.1.0"
   }
   ```

8. **Troubleshooting**
   - Dependency conflicts: Use `npm install --legacy-peer-deps`
   - Force resolution: `npm install --force`
   - Clear cache: `npm cache clean --force`
   - Rebuild: `npm rebuild`

## Best Practices

1. **Package Selection**
   - Prefer official packages over community packages
   - Check package download statistics
   - Verify maintenance status and last update
   - Review open issues and pull requests

2. **Security**
   - Run `npm audit` regularly
   - Keep dependencies updated
   - Review security advisories
   - Use `npm audit fix` with caution

3. **Performance**
   - Minimize number of dependencies
   - Use tree-shaking compatible packages
   - Consider bundle size impact
   - Monitor package size with `npm package-size`

4. **Documentation**
   - Document major dependency changes
   - Keep track of breaking changes
   - Update README with new dependencies
   - Document custom scripts in package.json 