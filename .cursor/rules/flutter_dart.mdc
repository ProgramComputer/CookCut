---
description: Enforce Flutter and Dart coding standards across all Dart files (both application and tests) to ensure high-quality code. This rule addresses null safety, widget composition, effective dependency injection, and coding patterns in line with Material 3 design principles and Flutter best practices.
globs: lib/**/*.dart, test/**/*.dart
---

## Flutter & Dart Code Quality

This rule ensures:

- **Project Structure:**
  - Follow clean architecture principles:
    ```
    lib/
      core/
        constants/
        theme/
        utils/
        widgets/
      features/
        feature_name/
          data/
            datasources/
            models/
            repositories/
          domain/
            entities/
            repositories/
            usecases/
          presentation/
            bloc/
            pages/
            widgets/
      l10n/
      main.dart
    test/
      unit/
      widget/
      integration/
    ```
  - Maintain flexibility to adapt to existing structures
  - Keep consistent organization within features
  - Follow proper file naming conventions
  - Implement proper dependency boundaries

- **Null Safety:**
  - All Dart files must fully adhere to Dart's null safety practices
  - Use proper null-aware operators
  - Implement proper null checks
  - Follow sound null safety principles

- **Clean Code & Widget Composition:**
  - Keep widgets small and focused
  - Use `const` constructors when possible
  - Follow proper widget lifecycle methods
  - Implement proper error boundaries
  - Use proper performance optimization techniques
  - Follow proper accessibility guidelines

- **Architecture & Patterns:**
  - Implement clean architecture with BLoC pattern
  - Follow proper state management principles
  - Use proper dependency injection (GetIt)
  - Implement proper routing using GoRouter
  - Follow proper repository pattern
  - Use proper use case implementation

- **Error Handling:**
  - Implement proper error handling with Either type
  - Use proper exception handling
  - Implement proper error reporting
  - Follow proper error recovery patterns
  - Use proper error boundaries

- **Testing:**
  - Write unit tests for business logic
  - Implement widget tests for UI components
  - Use integration tests for feature testing
  - Implement proper mocking strategies
  - Use proper test coverage tools
  - Follow proper test naming conventions
  - Implement proper CI/CD testing

- **Performance:**
  - Use proper image caching
  - Implement proper list view optimization
  - Use proper build methods optimization
  - Follow proper state management patterns
  - Implement proper memory management
  - Use proper platform channels when needed
  - Follow proper compilation optimization techniques

- **Asset Management:**
  - Follow proper asset organization
  - Use proper image resolution handling
  - Implement proper font management
  - Follow proper localization techniques
  - Use proper resource naming conventions
  - **Supabase Storage Structure:**
    - Follow the established bucket structure for `cookcut-media`:
      ```
      cookcut-media/
      └── media/
          └── <project-id>/
              ├── thumbnails/    # For preview images
              ├── raw/          # For original uploads
              └── processed/    # For processed files
      ```
    - When modifying storage paths:
      1. Document the change in PRD.md
      2. Provide migration plan for existing files
      3. Update all related services consistently
      4. Ask for confirmation before changing established paths
    - Storage path changes require:
      - Team discussion
      - Documentation update
      - Migration strategy
      - Rollback plan
    - Maintain consistent naming across:
      - Storage service methods
      - Repository implementations
      - URL construction
      - Path extraction utilities

- **Firestore Rules Synchronization:**
  - **IMPORTANT: This section MUST be kept in sync with `firestore.rules`**
  - Any changes to Firestore access patterns MUST:
    1. First review `firestore.rules` at root directory
    2. If changes needed, update `firestore.rules` first
    3. Then reflect those changes here and in implementations
    4. If rules don't exist, request addition to `firestore.rules`

  - Current Firestore Structure (from `firestore.rules`):
    ```
    projects/{projectId}/
    ├── media_assets/{assetId}/
    │   └── comments/{commentId}      # See firestore.rules:match /projects/{projectId}/media_assets/{assetId}/comments/{commentId}
    ├── collaborators/{userId}        # See firestore.rules:match /projects/{projectId}/collaborators/{userId}
    ├── video_overlays/{overlayId}    # See firestore.rules:match /projects/{projectId}/video_overlays/{overlayId}
    └── edit_sessions/               # See firestore.rules:match /projects/{projectId}/edit_sessions/{sessionId}
    ```

  - Repository Implementation Requirements:
    1. MUST implement ALL permission checks from `firestore.rules`
    2. MUST handle ALL error cases defined in rules
    3. MUST use helper functions defined in rules (e.g., `isOneOfRoles`, `isSignedIn`)
    4. CANNOT bypass any restrictions set in rules

  - Permission Mapping (must match `firestore.rules`):
    - Authentication: `isSignedIn()`
    - Project Access: `isOneOfRoles(projectId, ['owner', 'editor', 'viewer'])`
    - Edit Access: `isOneOfRoles(projectId, ['owner', 'editor'])`
    - Owner Access: `resource.data.user_id == request.auth.uid`

  - When Implementing New Features:
    1. Check if required rules exist in `firestore.rules`
    2. If not, request rule addition/modification
    3. Only proceed with implementation after rules are updated
    4. Document rule dependencies in repository classes

  - Testing Requirements:
    - Unit tests MUST verify against `firestore.rules` conditions
    - Integration tests MUST validate rule compliance
    - Mock responses MUST reflect rule restrictions
    - Error handling MUST match rule failure cases

- **Package Management:**
  - Always use `flutter pub add [package_name]` to add new dependencies
  - Use `flutter pub add [package_name] --dev` for dev dependencies
  - Keep dependencies up to date with `flutter pub upgrade`
  - Document any specific version requirements in comments
  - Follow proper version constraint practices
  - Maintain clean pubspec.yaml organization

- **Documentation & Quality:**
  - Follow proper documentation standards
  - Use proper inline documentation
  - Implement proper API documentation
  - Follow proper code formatting
  - Use proper linting rules
  - Follow proper version control practices 