---
description: Ensure that Flutter presentation files adhere to Material 3 design guidelines, Laws of UX, and proper BLoC architecture. This rule covers UI components, page structures, state management, widget composition, and user experience principles.
globs: lib/features/**/presentation/**/*.dart
---

## Flutter Presentation Layer Guidelines

This rule mandates:

- **Material 3 Design:**
  - Follow Material 3 guidelines for coherent look
  - Use proper elevation and shadows
  - Implement proper motion and animations
  - Follow platform-specific patterns (Material/Cupertino)
  - Use proper color schemes and contrasts

- **Laws of UX:**
  - Fitts's Law: Make interactive elements size proportional to their importance and frequency of use
  - Hick's Law: Minimize choices to reduce decision time
  - Miller's Law: Group information into 7Â±2 chunks
  - Jakob's Law: Follow common design patterns users are familiar with
  - Peak-End Rule: Optimize key interaction points and endings
  - Aesthetic-Usability Effect: Maintain visual appeal without sacrificing functionality
  - Doherty Threshold: Keep response times under 400ms for optimal engagement
  - Postel's Law: Be conservative in what you send, liberal in what you accept
  - Von Restorff Effect: Highlight key features distinctively
  - Serial Position Effect: Place key actions at start or end of lists

- **Mobile-Specific UX:**
  - Follow "thumb-friendly" design principles
  - Implement proper gesture navigation
  - Handle keyboard interactions properly
  - Support proper form factor adaptations
  - Implement proper pull-to-refresh patterns
  - Handle offline states gracefully
  - Support proper deep linking
  - Implement proper app shortcuts

- **Firebase UI Integration:**
  - Implement proper authentication UI flows
  - Handle offline data gracefully
  - Show proper loading states
  - Implement proper error handling UI
  - Follow Firebase UI best practices
  - Handle push notification UI properly
  - Implement proper data persistence UI

- **UX Principles:**
  - Visual Hierarchy: Use size, color, and spacing to guide attention
  - Progressive Disclosure: Show information progressively to reduce cognitive load
  - Error Prevention: Guide users to prevent errors before they occur
  - Feedback: Provide clear feedback for all user actions
  - Accessibility: Support various user needs and assistive technologies
  - Consistency: Maintain consistent patterns throughout the app
  - Recognition over Recall: Make options visible
  - Forgiveness: Allow users to undo actions

- **BLoC Architecture:**
  - Enforce separation of UI from business logic
  - Implement proper state management
  - Handle loading states properly
  - Implement proper error handling
  - Follow proper event handling patterns

- **Widget Composition:**
  - Ensure widgets are small and reusable
  - Follow proper widget lifecycle
  - Implement proper state restoration
  - Use proper keys for widget identification
  - Follow proper widget tree structure

- **Accessibility:**
  - Semantic labels for screen readers
  - Sufficient color contrast (WCAG 2.1 guidelines)
  - Touch target sizes (minimum 48x48 logical pixels)
  - Support for text scaling
  - Implement proper focus handling
  - Support various input methods
  - Handle screen reader announcements

- **Theming:**
  - Follow proper theme inheritance
  - Support dark/light modes
  - Implement proper color systems
  - Follow proper typography scales
  - Support proper RTL layouts
  - Handle custom themes properly
  
  **CookCut Theme Requirements:**
  - Use the CookCut brand color palette:
    - Primary: Deep Orange (#FF5722)
    - Secondary: Teal (#009688)
    - Background: Pure White (#FFFFFF) / Dark Gray (#121212)
    - Surface: Light Gray (#F5F5F5) / Dark Surface (#1E1E1E)
  - Typography:
    - Use Poppins for headings
    - Use Inter for body text
    - Follow Material 3 type scale
  - Component Styling:
    - Cards with subtle elevation (2dp)
    - Rounded corners (12px radius)
    - Consistent padding (16px)
    - Interactive elements with clear hover states
  - Brand Identity:
    - Use cooking-related icons where applicable
    - Maintain professional editing tool aesthetics
    - Follow CapCut-inspired minimal design
  - Accessibility:
    - Maintain WCAG 2.1 AA compliance
    - Support high contrast modes
    - Ensure readable text sizes
  - Motion:
    - Smooth transitions (300ms standard)
    - Subtle hover animations
    - Loading state animations

- **Responsive Design:**
  - Support different screen sizes
  - Implement adaptive layouts
  - Handle different pixel densities
  - Support different orientations
  - Handle notches and cutouts
  - Support foldable devices
  - Handle keyboard visibility

- **Performance:**
  - Smooth animations (60fps)
  - Quick load times
  - Efficient widget rebuilds
  - Proper image optimization
  - Handle memory constraints
  - Implement proper caching
  - Monitor frame drops

- **Code Quality:**
  - Use flutter_lints
  - Follow consistent formatting
  - Implement proper error boundaries
  - Follow proper naming conventions
  - Document complex widgets
  - Follow proper testing practices 