---
description:  Rules and best practices for Gradle build files
globs:   **/*.gradle  -,**/*.gradle.kts   ,**/gradle.properties   , **/settings.gradle"   , **/settings.gradle.kts
---
# Gradle Build Rules

## Version Requirements
- Flutter requires Gradle versions between 7.3 through 7.6.1 inclusive
- Android Gradle Plugin (AGP) should be compatible with chosen Gradle version
- Kotlin version should be compatible with chosen AGP version

## Block Ordering
- `pluginManagement {}` must be the first block in settings.gradle
- Only `buildscript {}`, `pluginManagement {}`, and other `plugins {}` blocks allowed before main `plugins {}` block
- `repositories {}` should be defined before dependencies
- `buildCache {}` must be inside `pluginManagement {}` block in settings.gradle, not as a standalone block
- Build scan plugin must be applied before other configuration blocks in build.gradle

## Best Practices
- Android Gradle Plugin (AGP) version must be 8.1.4 (latest stable) - DO NOT use experimental versions like 8.2.x
- Use `implementation` instead of deprecated `compile` configuration
- Prefer `mavenCentral()` over deprecated `jcenter()`
- Avoid dynamic versions ('+') in dependencies
- Use version catalogs for dependency management
- Consider `-bin` distribution over `-all` for smaller download size
- Use Gradle's built-in build cache (android.enableBuildCache is deprecated since AGP 7.0)
- Use file system watching for faster incremental builds
- Implement parallel task execution when possible
- Use configuration cache to speed up subsequent builds
- Centralize dependency declarations using version catalogs and platforms
- Implement lazy task configuration to improve configuration time
- Use Gradle wrapper to ensure consistent builds across environments
- Enable continuous builds for development workflow optimization
- Implement proper dependency constraints for version alignment
- Use build scans for build performance insights and debugging
- **REQUIRED**: Configure Java 17 toolchain in app/build.gradle after compileOptions:
  ```gradle
  android {
      // ... other configs ...
      compileOptions {
          sourceCompatibility JavaVersion.VERSION_17
          targetCompatibility JavaVersion.VERSION_17
      }
      kotlinOptions {
          jvmTarget = '17'
      }
      java {
          toolchain {
              languageVersion = JavaLanguageVersion.of(17)
          }
      }
  }
  ```

## Performance Optimization
- Configure Gradle properties in gradle.properties:
```gradle
# Gradle Performance
org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError
org.gradle.parallel=true
org.gradle.caching=true
org.gradle.configuration-cache=true

# Android settings
android.useAndroidX=true
android.nonTransitiveRClass=true

# Flutter settings (if applicable)
flutter.minSdkVersion=21
flutter.targetSdkVersion=34
flutter.compileSdkVersion=34
```

- Enable build cache in settings.gradle:
```gradle
// In settings.gradle or settings.gradle.kts
pluginManagement {
    buildCache {
        local {
            enabled = true
            directory = new File(rootDir, 'build-cache')
            removeUnusedEntriesAfterDays = 30
        }
    }
}
```

## Common Issues
- @android/settings.gradle - Check block ordering and Flutter SDK path configuration
- @android/build.gradle - Verify plugin versions match Flutter requirements
- @gradle-wrapper.properties - Review distribution type and Gradle version (7.3-7.6.1)
- DO NOT use android.enableBuildCache (removed in AGP 7.0)
- Use Gradle's built-in build cache instead of Android-specific cache
- Build scan plugin must be applied before using gradleEnterprise block
- When encountering build issues:
  - Run with --scan flag for detailed insights
  - Use --debug for verbose logging
  - Check Gradle version compatibility
  - Verify plugin versions match Gradle version
  - Avoid experimental AGP versions (e.g., 8.2.x) as they may have unstable features
- Java toolchain must be configured in app/build.gradle for proper Flutter-Android integration

## Flutter Integration
- Flutter SDK path must be properly configured in settings.gradle
- Flutter Gradle plugin must be included via pluginManagement
- Android configuration should align with Flutter requirements
- Ensure Gradle version is between 7.3 and 7.6.1 inclusive
- Java toolchain must be configured in app/build.gradle for proper Flutter-Android integration

## Caching Configuration
- Caching settings should be configured in gradle.properties
- Required properties for optimal build performance:
  - `org.gradle.caching=true` - Enables Gradle's build cache
  - `org.gradle.parallel=true` - Enables parallel project execution
  - `org.gradle.configureondemand=true` - Enables on-demand project configuration
- These settings affect the entire build process and should be centralized in gradle.properties

## Snippets
```gradle
// Plugin Management Block with Build Cache
pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }
    
    buildCache {
        local {
            enabled = true
            directory = new File(rootDir, 'build-cache')
            removeUnusedEntriesAfterDays = 30
        }
    }
}

// Root build.gradle
buildscript {
    ext {
        agp_version = '8.1.4'  // Latest stable Android Gradle Plugin
        compileSdk = 34
        minSdk = 21
        targetSdk = 34
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${agp_version}"
        classpath 'com.google.gms:google-services:4.4.0'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

// Plugins Block for Flutter Projects
plugins {
    id 'com.android.application' version '7.3.0' apply false
    id 'org.jetbrains.kotlin.android' version '1.7.10' apply false
    id 'dev.flutter.flutter-plugin-loader' version '1.0.0'
}

// Repository Configuration
repositories {
    google()
    mavenCentral()
}
```

## Migration Notes
- When upgrading Gradle versions, stay within Flutter's supported range (7.3-7.6.1)
- Update AGP version to match Gradle version requirements
- Update Kotlin version to maintain compatibility with AGP
- Test builds after version changes to ensure compatibility 